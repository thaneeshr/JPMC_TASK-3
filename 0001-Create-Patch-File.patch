From 5f2a6e348cfb90511aa115be2daf7f6566a87205 Mon Sep 17 00:00:00 2001
From: thaneeshr <chichilithaneesh@gmail.com>
Date: Wed, 6 May 2020 22:03:05 +0530
Subject: [PATCH] Create Patch File

---
 datafeed/server3.py    |  2 +-
 src/DataManipulator.ts | 35 +++++++++++++++++++++++++----------
 src/DataStreamer.ts    |  2 +-
 src/Graph.tsx          | 25 ++++++++++++++++---------
 4 files changed, 43 insertions(+), 21 deletions(-)

diff --git a/datafeed/server3.py b/datafeed/server3.py
index 2de4e28..402e94f 100644
--- a/datafeed/server3.py
+++ b/datafeed/server3.py
@@ -202,7 +202,7 @@ def get(req_handler, routes):
                 req_handler.wfile.write(bytes(data,  encoding = 'utf-8'))
                 return
 
-def run(routes, host = '0.0.0.0', port = 8080):
+def run(routes, host = '0.0.0.0', port = 8086):
     """ Runs a class as a server whose methods have been decorated with
         @route.
     """
diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index f6b15ff..00b8179 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,35 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
-  timestamp: Date,
+ price_abc: number,
+      price_def: number,
+      ratio:number,
+      timestamp: Date,
+      upper_bound:number,
+      lower_bound:number,
+      trigger_alert:number | undefined,
 }
 
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]): Row[] {
-    return serverResponds.map((el: any) => {
+  static generateRow(serverRespond: ServerRespond[]): Row {
+  const priceABC=(serverRespond[0].top_ask.price+serverRespond[0].top_bid.price)/2;
+    const priceDEF=(serverRespond[1].top_ask.price+serverRespond[1].top_bid.price)/2;
+  const ratio =priceABC/priceDEF;
+  const upperBound=1+0.05;
+  const lowerBound=1-0.05;
+
+
       return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
+      price_abc:priceABC,
+      price_def:priceDEF,
+      ratio,timestamp:serverRespond[0].timestamp>serverRespond[1].timestamp?serverRespond[0].timestamp:serverRespond[1].timestamp,
+      upper_bound:upperBound,
+      lower_bound:lowerBound,
+      trigger_alert:(ratio>upperBound||ratio<lowerBound)?ratio:undefined,
+
+
       };
-    })
+    }
   }
-}
+
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 9d9eca7..cd2b17e 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -10,7 +10,7 @@ export interface ServerRespond {
 }
 
 class DataStreamer {
-  static API_URL: string = 'http://localhost:8080/query?id=1';
+  static API_URL: string = 'http://localhost:8086/query?id=1';
 
   static getData(callback: (data: ServerRespond[]) => void): void {
     const request = new XMLHttpRequest();
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 58fb997..9a8f1dc 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -23,10 +23,14 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+
+      price_abc: 'float',
+      price_def: 'float',
+      ratio:'float',
       timestamp: 'date',
+      upper_bound:'float',
+      lower_bound:'float',
+      trigger_alert:'float'
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -40,19 +44,22 @@ class Graph extends Component<IProps, {}> {
       elem.setAttribute('row-pivots', '["timestamp"]');
       elem.setAttribute('columns', '["top_ask_price"]');
       elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
-        timestamp: 'distinct count',
+        price_abc: 'avg',
+      price_def: 'avg',
+      ratio:'avg',
+      timestamp: 'distinct count',
+      upper_bound:'avg',
+      lower_bound:'avg',
+      trigger_alert:'avg'
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([
         DataManipulator.generateRow(this.props.data),
-      );
+      ]);
     }
   }
 }
-- 
2.26.2.windows.1

